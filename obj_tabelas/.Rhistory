install.packages("ggplot2")
file_path <- Sys.glob("C:\Script\ping_logs_*.txt")  # Localiza o último arquivo de logs
library(shiny)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
# UI do Dashboard
ui <- fluidPage(
titlePanel("Monitoramento de Latência - Ping"),
sidebarLayout(
sidebarPanel(
actionButton("refresh", "Atualizar Dados"),
textOutput("latest_latency")
),
mainPanel(
plotOutput("latencyPlot")
)
)
)
# Servidor
server <- function(input, output, session) {
ping_data <- reactive({
input$refresh  # Atualiza ao clicar no botão
invalidateLater(5000, session)  # Atualiza automaticamente a cada 5 segundos
load_ping_data()
})
output$latencyPlot <- renderPlot({
data <- ping_data()
if (nrow(data) > 0) {
ggplot(data, aes(x = Timestamp, y = Latency)) +
geom_line(color = "blue") +
labs(title = "Latência do Ping ao Longo do Tempo",
x = "Timestamp", y = "Latência (ms)") +
theme_minimal()
} else {
ggplot() + labs(title = "Nenhum dado disponível", x = "", y = "")
}
})
output$latest_latency <- renderText({
data <- ping_data()
if (nrow(data) > 0) {
latest <- tail(data$Latency, 1)
paste("Última latência registrada:", latest, "ms")
} else {
"Nenhum dado disponível"
}
})
}
View(server)
server <- function(input, output, session) {
ping_data <- reactive({
input$refresh  # Atualiza ao clicar no botão
invalidateLater(5000, session)  # Atualiza automaticamente a cada 5 segundos
load_ping_data()
})
output$latencyPlot <- renderPlot({
data <- ping_data()
if (nrow(data) > 0) {
ggplot(data, aes(x = Timestamp, y = Latency)) +
geom_line(color = "blue") +
labs(title = "Latência do Ping ao Longo do Tempo",
x = "Timestamp", y = "Latência (ms)") +
theme_minimal()
} else {
ggplot() + labs(title = "Nenhum dado disponível", x = "", y = "")
}
})
output$latest_latency <- renderText({
data <- ping_data()
if (nrow(data) > 0) {
latest <- tail(data$Latency, 1)
paste("Última latência registrada:", latest, "ms")
} else {
"Nenhum dado disponível"
}
})
}
gc()
if (nrow(data) > 0) {
ggplot(data, aes(x = Timestamp, y = Latency)) +
geom_line(color = "blue") +
labs(title = "Latência do Ping ao Longo do Tempo",
x = "Timestamp", y = "Latência (ms)") +
theme_minimal()
} else {
ggplot() + labs(title = "Nenhum dado disponível", x = "", y = "")
}
output$latencyPlot <- renderPlot({
data <- ping_data()
if (nrow(data) > 0) {
ggplot(data, aes(x = Timestamp, y = Latency)) +
geom_line(color = "blue") +
labs(title = "Latência do Ping ao Longo do Tempo",
x = "Timestamp", y = "Latência (ms)") +
theme_minimal()
} else {
ggplot() + labs(title = "Nenhum dado disponível", x = "", y = "")
}
})
output$latest_latency <- renderText({
data <- ping_data()
if (nrow(data) > 0) {
latest <- tail(data$Latency, 1)
paste("Última latência registrada:", latest, "ms")
} else {
"Nenhum dado disponível"
}
})
server <- function(input, output, session) {
ping_data <- reactive({
input$refresh  # Atualiza ao clicar no botão
invalidateLater(5000, session)  # Atualiza automaticamente a cada 5 segundos
load_ping_data()
})
output$latencyPlot <- renderPlot({
data <- ping_data()
if (nrow(data) > 0) {
ggplot(data, aes(x = Timestamp, y = Latency)) +
geom_line(color = "blue") +
labs(title = "Latência do Ping ao Longo do Tempo",
x = "Timestamp", y = "Latência (ms)") +
theme_minimal()
} else {
ggplot() + labs(title = "Nenhum dado disponível", x = "", y = "")
}
})
output$latest_latency <- renderText({
data <- ping_data()
if (nrow(data) > 0) {
latest <- tail(data$Latency, 1)
paste("Última latência registrada:", latest, "ms")
} else {
"Nenhum dado disponível"
}
})
}
if (nrow(data) > 0) {
latest <- tail(data$Latency, 1)
paste("Última latência registrada:", latest, "ms")
} else {
"Nenhum dado disponível"
}
q()
shinyApp(ui = ui, server = server)
install.packages("shiny")
library(shiny)
library(ggplot2)
library(readr)
library(shiny)
library(ggplot2)
library(readr)
tipo_os <- unique(dt_convertidos$tipo_os)
library(dplyr)
library(readxl)
library(data.table)
library(ggplot2)
#read.csv não suporta planilha.xlsx, importando dados
dt = read_xlsx("R/projetos_R/Planilha/dados-tratados.xlsx")
#convertendo para data.table, recebe como parâmetro o dado.xlsx
dt_convertidos <- as.data.table(dt)
#ler e exibe as primeiras linhas do conjunto de tabela
#print(head(dt_convertidos, 3))
#print(colnames(dt_convertidos))
tipo_os <- unique(dt_convertidos$tipo_os)
executor <- unique(dt_convertidos$executor)
print(tipo_os)
print(executor)
#Quando trabalhamos com 'data.table' não é utilizado o filter()
#é feita dentro dos colchetes
os_por_executor <-
dt_convertidos[tipo_os == tipo_os & executor == executor]
#quantitativo de 'OS' por 'executor'
os_por_executor <- dt_convertidos %>%
group_by(executor) %>%
summarise(total = n())
print(os_por_executor)
#ggplot gera um grafico com a base no parametro
ggplot(os_por_executor, aes(x = tipo_os, y = total, fill = executor )) +
geom_col()
library(dplyr)
library(readxl)
library(data.table)
library(ggplot2)
#read.csv não suporta planilha.xlsx, importando dados
dt = read_xlsx("R/projetos_R/Planilha/dados-tratados.xlsx")
#convertendo para data.table, recebe como parâmetro o dado.xlsx
dt_convertidos <- as.data.table(dt)
#ler e exibe as primeiras linhas do conjunto de tabela
#print(head(dt_convertidos, 3))
#print(colnames(dt_convertidos))
tipo_os <- unique(dt_convertidos$tipo_os)
executor <- unique(dt_convertidos$executor)
print(tipo_os)
print(executor)
#Quando trabalhamos com 'data.table' não é utilizado o filter()
#é feita dentro dos colchetes
#os_por_executor <-
#dt_convertidos[tipo_os == tipo_os & executor == executor]
#quantitativo de 'OS' por 'executor'
os_por_executor <- dt_convertidos %>%
group_by(executor) %>%
summarise(total = n())
print(os_por_executor)
#ggplot gera um grafico com a base no parametro
ggplot(os_por_executor, aes(x = tipo_os, y = total, fill = executor )) +
geom_col()
library(dplyr)
library(readxl)
library(data.table)
library(ggplot2)
#read.csv não suporta planilha.xlsx, importando dados
dt = read_xlsx("R/projetos_R/Planilha/dados-tratados.xlsx")
#convertendo para data.table, recebe como parâmetro o dado.xlsx
dt_convertidos <- as.data.table(dt)
#ler e exibe as primeiras linhas do conjunto de tabela
#print(head(dt_convertidos, 3))
#print(colnames(dt_convertidos))
tipo_os <- unique(dt_convertidos$tipo_os)
executor <- unique(dt_convertidos$executor)
print(tipo_os)
print(executor)
#Quando trabalhamos com 'data.table' não é utilizado o filter()
#é feita dentro dos colchetes
os_por_executor <-
dt_convertidos[tipo_os == tipo_os & executor == executor]
#quantitativo de 'OS' por 'executor'
os_por_executor <- dt_convertidos %>%
group_by(executor, tipo_os) %>%
summarise(total = n(), .groups = "drop")
print(os_por_executor)
#ggplot gera um grafico com a base no parametro
ggplot(os_por_executor, aes(x = tipo_os, y = total, fill = executor )) +
geom_col()
labs(title = "OS por executor", x = "TIPO OS", y = "Total de atendiemntos")
theme_dark() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(colnames(dt_convertidos))
#quantitativo de 'OS' por 'executor'
os_por_executor <- dt_convertidos %>%
group_by(executor, tipo_os) %>%
summarise(total = n())
library(dplyr)
library(readxl)
library(data.table)
library(ggplot2)
#read.csv não suporta planilha.xlsx, importando dados
dt = read_xlsx("R/projetos_R/Planilha/dados-tratados.xlsx")
#convertendo para data.table, recebe como parâmetro o dado.xlsx
dt_convertidos <- as.data.table(dt)
#ler e exibe as primeiras linhas do conjunto de tabela
#print(head(dt_convertidos, 3))
#print(colnames(dt_convertidos))
tipo_os <- unique(dt_convertidos$tipo_os)
executor <- unique(dt_convertidos$executor)
print(tipo_os)
print(executor)
#Quando trabalhamos com 'data.table' não é utilizado o filter()
#é feita dentro dos colchetes
os_por_executor <-
dt_convertidos[tipo_os == tipo_os & executor == executor]
#quantitativo de 'OS' por 'executor'
os_por_executor <- dt_convertidos %>%
group_by(executor, tipo_os) %>%
summarise(total = n())
print(os_por_executor)
#ggplot gera um grafico com a base no parametro
ggplot(os_por_executor, aes(x = tipo_os, y = total, fill = executor )) +
geom_col()
labs(title = "OS por executor", x = "TIPO OS", y = "Total de atendiemntos")
theme_dark() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(colnames(dt_convertidos))
#ggplot gera um grafico com a base no parametro
ggplot(os_por_executor, aes(x = tipo_os, y = total )) +
geom_col()
#ggplot gera um grafico com a base no parametro
ggplot(os_por_executor, aes(x = tipo_os, y = total, colour = "red"")) +
#ggplot gera um grafico com a base no parametro
ggplot(os_por_executor, aes(x = tipo_os, y = total, colour = "red")) +
library(dplyr)
library(readxl)
library(data.table)
library(ggplot2)
#read.csv não suporta planilha.xlsx, importando dados
dt = read_xlsx("R/projetos_R/Planilha/dados-tratados.xlsx")
#convertendo para data.table, recebe como parâmetro o dado.xlsx
dt_convertidos <- as.data.table(dt)
#ler e exibe as primeiras linhas do conjunto de tabela
#print(head(dt_convertidos, 3))
#print(colnames(dt_convertidos))
tipo_os <- unique(dt_convertidos$tipo_os)
executor <- unique(dt_convertidos$executor)
print(tipo_os)
print(executor)
#Quando trabalhamos com 'data.table' não é utilizado o filter()
#é feita dentro dos colchetes
os_por_executor <-
dt_convertidos[tipo_os == tipo_os & executor == executor]
#quantitativo de 'OS' por 'executor'
os_por_executor <- dt_convertidos %>%
group_by(executor, tipo_os) %>%
summarise(total = n())
print(os_por_executor)
#ggplot gera um grafico com a base no parametro
ggplot(os_por_executor, aes(x = tipo_os, y = total, colour = "red")) +
geom_col()
labs(title = "OS por executor", x = "TIPO OS", y = "Total de atendiemntos")
theme_dark() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(colnames(dt_convertidos))
library(dplyr)
library(readxl)
library(data.table)
library(ggplot2)
ui <- dashboardPage(
dashboradHeader(),
dashboardSidebar(),
dashboardBody()
)
library(dplyr)
library(readxl)
library(data.table)
library(ggplot2)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
#read.csv não suporta planilha.xlsx, importando dados
dt = read_xlsx("R/projetos_R/Planilha/dados-tratados.xlsx")
#convertendo para data.table, recebe como parâmetro o dado.xlsx
dt_convertidos <- as.data.table(dt)
#ler e exibe as primeiras linhas do conjunto de tabela
#print(head(dt_convertidos, 3))
#print(colnames(dt_convertidos))
tipo_os <- unique(dt_convertidos$tipo_os)
executor <- unique(dt_convertidos$executor)
print(tipo_os)
print(executor)
#Quando trabalhamos com 'data.table' não é utilizado o filter()
#é feita dentro dos colchetes
os_por_executor <-
dt_convertidos[tipo_os == tipo_os & executor == executor]
#quantitativo de 'OS' por 'executor'
os_por_executor <- dt_convertidos %>%
group_by(executor, tipo_os) %>%
summarise(total = n())
print(os_por_executor)
#ggplot gera um grafico com a base no parametro
ggplot(os_por_executor, aes(x = tipo_os, y = total, fill = executor)) +
geom_col()
labs(title = "OS por executor", x = "TIPO OS", y = "Total de atendiemntos")
theme_dark() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(colnames(dt_convertidos))
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shinydashboard)
library(shiny)
library(shinydashboard)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(
title = "Relatório De Ordem de Serviço"
),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(readxl)
library(data.table)
library(ggplot2)
library(shinydashboard)
server <- function(input, output, session) {
}
library(shiny)
library(dplyr)
library(readxl)
library(data.table)
library(ggplot2)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(
title = "Relatório De Ordem de Serviço"
),
dashboardSidebar(),
dashboardBody()
)
#carregando e convertendo o xlsx para data_Frame
dt = read_xlsx("R/projetos_R/Planilha/dados-tratados.xlsx")
dt_convertidos = as.data.table(dt)
#com a função unique podemos selecionar colunas especificas do meu xlsx
tipo_os <- unique(dt_convertidos$tipo_os)
executor <- unique(dt_convertidos$executor)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shinydashboard)
os_por_executor <- dt_convertidos %>%
group_by(executor, tipo_os)
summarise(total = n(), .groups = "drop")
source("~/R/projetos_R/Dash/DadosTratados.R")
source("~/R/projetos_R/Dash/DadosTratados.R")
source("~/R/projetos_R/Dash/DadosTratados.R")
source("~/R/projetos_R/Dash/DadosTratados.R")
source("~/R/projetos_R/Dash/DadosTratados.R")
source("~/R/projetos_R/Dash/DadosTratados.R")
install.packages("collections")
install.packages(c("collections", "data.table", "generics", "profmem", "RPostgreSQL", "RSQLite", "utf8"))
install.packages(c("collections", "data.table", "RPostgreSQL"))
source("~/R/projetos_R/Dash/DadosTratados.R")
source("~/R/projetos_R/Dash/DadosTratados.R")
source("~/R/projetos_R/Dash/DadosTratados.R")
source("~/R/projetos_R/Dash/DadosTratados.R")
source("~/R/projetos_R/Dash/DadosTratados.R")
print(dados_select)
library(dplyr)
library(data.table)
library(ggplot2)
dados <- read.csv(
"R/projetos_R/Planilha/dados_shiny_2022081822.csv"
)
modelo <- 'corrola xei 16v'
uf <- c('mt','se')
dados_select <- dados %>% filter(MODELO == modelo & UF %in% uf)
print(dados_select)
library(dplyr)
library(data.table)
library(ggplot2)
dados <- read.csv(
"R/projetos_R/Planilha/dados_shiny_2022081822.csv"
)
modelo <- 'corrola xei 16v'
uf <- c('mt','se')
dados_select <- dados %>% filter(MODELO == modelo & UF %in% uf)
print(dados_select)
library(dplyr)
library(data.table)
library(ggplot2)
dados <- read.csv(
"R/projetos_R/Planilha/dados_shiny_2022081822.csv"
)
modelo <- 'corrola xei 16v'
uf <- c('mt','se')
dados_select <- dados %>% filter(MODELO == modelo & UF %in% uf)
ggplot()+
geom_line(aes(x = DATA_COLETA_METADADOS, y = VALOR))
print(dados)
print(colnames(dados))
ggplot(dados_select)+
geom_line(aes(x = DATA_COLETA_METADADOS, y = VALOR))
ggplot(dados_select)+
ggplot(dados_select)
#geom_line(aes(x = DATA_COLETA_METADADOS, y = VALOR))
#geom_line(aes(x = DATA_COLETA_METADADOS, y = VALOR))
dados_select %>%
group_by(DATA_COLETA_METADADOS) %>%
Summary(mediaValor = mediana(VALOR))
ggplot(dados_select)+
geom_line(aes(x = DATA_COLETA_METADADOS, y = VALOR))
dados_select %>%
group_by(DATA_COLETA_METADADOS) %>%
summarise(mediaValor = mediana(VALOR))
ggplot(dados_select)+
geom_line(aes(x = DATA_COLETA_METADADOS, y = VALOR))
library(dplyr)
library(data.table)
library(ggplot2)
dados <- read.csv(
"R/projetos_R/Planilha/dados_shiny_2022081822.csv"
)
print(colnames(dados))
modelo <- 'corrola xei 16v'
uf <- c('mt','se')
dados_select <- dados %>% filter(MODELO == modelo & UF %in% uf)
dados_select %>%
group_by(DATA_COLETA_METADADOS) %>%
summarise(mediaValor = mediana(VALOR))
library(dplyr)
library(data.table)
library(ggplot2)
dados <- read.csv(
"R/projetos_R/Planilha/dados_shiny_2022081822.csv"
)
print(colnames(dados))
modelo <- 'corrola xei 16v'
uf <- c('mt','se')
dados_select <- dados %>% filter(MODELO == modelo & UF %in% uf)
dados_select %>%
group_by(DATA_COLETA_METADADOS) %>%
summarise(mediaValor = mediana(VALOR))
shinyapp(ui, server)
library(shiny); runApp('R/Analise/obj_tabelas/tableInput_output_dataTable.R')
